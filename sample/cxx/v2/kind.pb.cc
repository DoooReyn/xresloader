// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kind.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* role_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_upgrade_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_upgrade_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_verifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_verifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* arr_in_arr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arr_in_arr_reflection_ = NULL;
const ::google::protobuf::Descriptor* arr_in_arr_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arr_in_arr_cfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kind_2eproto() {
  protobuf_AddDesc_kind_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kind.proto");
  GOOGLE_CHECK(file != NULL);
  role_cfg_descriptor_ = file->message_type(0);
  static const int role_cfg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, unlock_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, cost_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, cost_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, dep_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, test_array_),
  };
  role_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_cfg_descriptor_,
      role_cfg::default_instance_,
      role_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_cfg));
  role_upgrade_cfg_descriptor_ = file->message_type(1);
  static const int role_upgrade_cfg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_upgrade_cfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_upgrade_cfg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_upgrade_cfg, costtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_upgrade_cfg, costvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_upgrade_cfg, scoreadd_),
  };
  role_upgrade_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_upgrade_cfg_descriptor_,
      role_upgrade_cfg::default_instance_,
      role_upgrade_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_upgrade_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_upgrade_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_upgrade_cfg));
  test_msg_verifier_descriptor_ = file->message_type(2);
  static const int test_msg_verifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_verifier, test_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_verifier, test_id_2_),
  };
  test_msg_verifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_verifier_descriptor_,
      test_msg_verifier::default_instance_,
      test_msg_verifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_verifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_verifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_verifier));
  arr_in_arr_descriptor_ = file->message_type(3);
  static const int arr_in_arr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr, int_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr, str_arr_),
  };
  arr_in_arr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arr_in_arr_descriptor_,
      arr_in_arr::default_instance_,
      arr_in_arr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arr_in_arr));
  arr_in_arr_cfg_descriptor_ = file->message_type(4);
  static const int arr_in_arr_cfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr_cfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr_cfg, arr_),
  };
  arr_in_arr_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arr_in_arr_cfg_descriptor_,
      arr_in_arr_cfg::default_instance_,
      arr_in_arr_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arr_in_arr_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arr_in_arr_cfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kind_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_cfg_descriptor_, &role_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_upgrade_cfg_descriptor_, &role_upgrade_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_verifier_descriptor_, &test_msg_verifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arr_in_arr_descriptor_, &arr_in_arr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arr_in_arr_cfg_descriptor_, &arr_in_arr_cfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kind_2eproto() {
  delete role_cfg::default_instance_;
  delete role_cfg_reflection_;
  delete role_upgrade_cfg::default_instance_;
  delete role_upgrade_cfg_reflection_;
  delete test_msg_verifier::default_instance_;
  delete test_msg_verifier_reflection_;
  delete arr_in_arr::default_instance_;
  delete arr_in_arr_reflection_;
  delete arr_in_arr_cfg::default_instance_;
  delete arr_in_arr_cfg_reflection_;
}

void protobuf_AddDesc_kind_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dependency_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nkind.proto\032\020dependency.proto\"\221\001\n\010role_"
    "cfg\022\n\n\002id\030\001 \001(\r\022\024\n\014unlock_level\030\002 \001(\r\022\021\n"
    "\tcost_type\030\003 \001(\r\022\022\n\ncost_value\030\004 \001(\005\022\014\n\004"
    "name\030\005 \001(\t\022\032\n\010dep_test\030\n \001(\0132\010.dep_cfg\022\022"
    "\n\ntest_array\030\013 \003(\t\"d\n\020role_upgrade_cfg\022\n"
    "\n\002Id\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\022\020\n\010CostType\030\003 "
    "\001(\r\022\021\n\tCostValue\030\004 \001(\005\022\020\n\010ScoreAdd\030\005 \001(\005"
    "\";\n\021test_msg_verifier\022\022\n\ttest_id_1\030\221N \001("
    "\r\022\022\n\ttest_id_2\030\222N \001(\r\"<\n\narr_in_arr\022\014\n\004n"
    "ame\030\001 \001(\t\022\017\n\007int_arr\030\002 \003(\005\022\017\n\007str_arr\030\003 "
    "\003(\t\"6\n\016arr_in_arr_cfg\022\n\n\002id\030\001 \001(\r\022\030\n\003arr"
    "\030\002 \003(\0132\013.arr_in_arr", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kind.proto", &protobuf_RegisterTypes);
  role_cfg::default_instance_ = new role_cfg();
  role_upgrade_cfg::default_instance_ = new role_upgrade_cfg();
  test_msg_verifier::default_instance_ = new test_msg_verifier();
  arr_in_arr::default_instance_ = new arr_in_arr();
  arr_in_arr_cfg::default_instance_ = new arr_in_arr_cfg();
  role_cfg::default_instance_->InitAsDefaultInstance();
  role_upgrade_cfg::default_instance_->InitAsDefaultInstance();
  test_msg_verifier::default_instance_->InitAsDefaultInstance();
  arr_in_arr::default_instance_->InitAsDefaultInstance();
  arr_in_arr_cfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kind_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kind_2eproto {
  StaticDescriptorInitializer_kind_2eproto() {
    protobuf_AddDesc_kind_2eproto();
  }
} static_descriptor_initializer_kind_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int role_cfg::kIdFieldNumber;
const int role_cfg::kUnlockLevelFieldNumber;
const int role_cfg::kCostTypeFieldNumber;
const int role_cfg::kCostValueFieldNumber;
const int role_cfg::kNameFieldNumber;
const int role_cfg::kDepTestFieldNumber;
const int role_cfg::kTestArrayFieldNumber;
#endif  // !_MSC_VER

role_cfg::role_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:role_cfg)
}

void role_cfg::InitAsDefaultInstance() {
  dep_test_ = const_cast< ::dep_cfg*>(&::dep_cfg::default_instance());
}

role_cfg::role_cfg(const role_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:role_cfg)
}

void role_cfg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  unlock_level_ = 0u;
  cost_type_ = 0u;
  cost_value_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dep_test_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_cfg::~role_cfg() {
  // @@protoc_insertion_point(destructor:role_cfg)
  SharedDtor();
}

void role_cfg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete dep_test_;
  }
}

void role_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_cfg_descriptor_;
}

const role_cfg& role_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kind_2eproto();
  return *default_instance_;
}

role_cfg* role_cfg::default_instance_ = NULL;

role_cfg* role_cfg::New() const {
  return new role_cfg;
}

void role_cfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<role_cfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, cost_value_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_dep_test()) {
      if (dep_test_ != NULL) dep_test_->::dep_cfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  test_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:role_cfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlock_level;
        break;
      }

      // optional uint32 unlock_level = 2;
      case 2: {
        if (tag == 16) {
         parse_unlock_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_level_)));
          set_has_unlock_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost_type;
        break;
      }

      // optional uint32 cost_type = 3;
      case 3: {
        if (tag == 24) {
         parse_cost_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_type_)));
          set_has_cost_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cost_value;
        break;
      }

      // optional int32 cost_value = 4;
      case 4: {
        if (tag == 32) {
         parse_cost_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_value_)));
          set_has_cost_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_dep_test;
        break;
      }

      // optional .dep_cfg dep_test = 10;
      case 10: {
        if (tag == 82) {
         parse_dep_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dep_test()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_test_array;
        break;
      }

      // repeated string test_array = 11;
      case 11: {
        if (tag == 90) {
         parse_test_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_array(this->test_array_size() - 1).data(),
            this->test_array(this->test_array_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test_array");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_test_array;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:role_cfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:role_cfg)
  return false;
#undef DO_
}

void role_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:role_cfg)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 unlock_level = 2;
  if (has_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unlock_level(), output);
  }

  // optional uint32 cost_type = 3;
  if (has_cost_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_type(), output);
  }

  // optional int32 cost_value = 4;
  if (has_cost_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost_value(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional .dep_cfg dep_test = 10;
  if (has_dep_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->dep_test(), output);
  }

  // repeated string test_array = 11;
  for (int i = 0; i < this->test_array_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->test_array(i).data(), this->test_array(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "test_array");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->test_array(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:role_cfg)
}

::google::protobuf::uint8* role_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:role_cfg)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 unlock_level = 2;
  if (has_unlock_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unlock_level(), target);
  }

  // optional uint32 cost_type = 3;
  if (has_cost_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_type(), target);
  }

  // optional int32 cost_value = 4;
  if (has_cost_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost_value(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional .dep_cfg dep_test = 10;
  if (has_dep_test()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->dep_test(), target);
  }

  // repeated string test_array = 11;
  for (int i = 0; i < this->test_array_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_array(i).data(), this->test_array(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test_array");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->test_array(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:role_cfg)
  return target;
}

int role_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 unlock_level = 2;
    if (has_unlock_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_level());
    }

    // optional uint32 cost_type = 3;
    if (has_cost_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_type());
    }

    // optional int32 cost_value = 4;
    if (has_cost_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_value());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dep_cfg dep_test = 10;
    if (has_dep_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dep_test());
    }

  }
  // repeated string test_array = 11;
  total_size += 1 * this->test_array_size();
  for (int i = 0; i < this->test_array_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_array(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_cfg::MergeFrom(const role_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  test_array_.MergeFrom(from.test_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unlock_level()) {
      set_unlock_level(from.unlock_level());
    }
    if (from.has_cost_type()) {
      set_cost_type(from.cost_type());
    }
    if (from.has_cost_value()) {
      set_cost_value(from.cost_value());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dep_test()) {
      mutable_dep_test()->::dep_cfg::MergeFrom(from.dep_test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_cfg::CopyFrom(const role_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_cfg::IsInitialized() const {

  return true;
}

void role_cfg::Swap(role_cfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unlock_level_, other->unlock_level_);
    std::swap(cost_type_, other->cost_type_);
    std::swap(cost_value_, other->cost_value_);
    std::swap(name_, other->name_);
    std::swap(dep_test_, other->dep_test_);
    test_array_.Swap(&other->test_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_cfg_descriptor_;
  metadata.reflection = role_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_upgrade_cfg::kIdFieldNumber;
const int role_upgrade_cfg::kLevelFieldNumber;
const int role_upgrade_cfg::kCostTypeFieldNumber;
const int role_upgrade_cfg::kCostValueFieldNumber;
const int role_upgrade_cfg::kScoreAddFieldNumber;
#endif  // !_MSC_VER

role_upgrade_cfg::role_upgrade_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:role_upgrade_cfg)
}

void role_upgrade_cfg::InitAsDefaultInstance() {
}

role_upgrade_cfg::role_upgrade_cfg(const role_upgrade_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:role_upgrade_cfg)
}

void role_upgrade_cfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  costtype_ = 0u;
  costvalue_ = 0;
  scoreadd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_upgrade_cfg::~role_upgrade_cfg() {
  // @@protoc_insertion_point(destructor:role_upgrade_cfg)
  SharedDtor();
}

void role_upgrade_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_upgrade_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_upgrade_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_upgrade_cfg_descriptor_;
}

const role_upgrade_cfg& role_upgrade_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kind_2eproto();
  return *default_instance_;
}

role_upgrade_cfg* role_upgrade_cfg::default_instance_ = NULL;

role_upgrade_cfg* role_upgrade_cfg::New() const {
  return new role_upgrade_cfg;
}

void role_upgrade_cfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<role_upgrade_cfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, scoreadd_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_upgrade_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:role_upgrade_cfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CostType;
        break;
      }

      // optional uint32 CostType = 3;
      case 3: {
        if (tag == 24) {
         parse_CostType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costtype_)));
          set_has_costtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CostValue;
        break;
      }

      // optional int32 CostValue = 4;
      case 4: {
        if (tag == 32) {
         parse_CostValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costvalue_)));
          set_has_costvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ScoreAdd;
        break;
      }

      // optional int32 ScoreAdd = 5;
      case 5: {
        if (tag == 40) {
         parse_ScoreAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoreadd_)));
          set_has_scoreadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:role_upgrade_cfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:role_upgrade_cfg)
  return false;
#undef DO_
}

void role_upgrade_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:role_upgrade_cfg)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 CostType = 3;
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->costtype(), output);
  }

  // optional int32 CostValue = 4;
  if (has_costvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->costvalue(), output);
  }

  // optional int32 ScoreAdd = 5;
  if (has_scoreadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scoreadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:role_upgrade_cfg)
}

::google::protobuf::uint8* role_upgrade_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:role_upgrade_cfg)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 CostType = 3;
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->costtype(), target);
  }

  // optional int32 CostValue = 4;
  if (has_costvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->costvalue(), target);
  }

  // optional int32 ScoreAdd = 5;
  if (has_scoreadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scoreadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:role_upgrade_cfg)
  return target;
}

int role_upgrade_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 CostType = 3;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costtype());
    }

    // optional int32 CostValue = 4;
    if (has_costvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costvalue());
    }

    // optional int32 ScoreAdd = 5;
    if (has_scoreadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoreadd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_upgrade_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_upgrade_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_upgrade_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_upgrade_cfg::MergeFrom(const role_upgrade_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
    if (from.has_costvalue()) {
      set_costvalue(from.costvalue());
    }
    if (from.has_scoreadd()) {
      set_scoreadd(from.scoreadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_upgrade_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_upgrade_cfg::CopyFrom(const role_upgrade_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_upgrade_cfg::IsInitialized() const {

  return true;
}

void role_upgrade_cfg::Swap(role_upgrade_cfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(costtype_, other->costtype_);
    std::swap(costvalue_, other->costvalue_);
    std::swap(scoreadd_, other->scoreadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_upgrade_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_upgrade_cfg_descriptor_;
  metadata.reflection = role_upgrade_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_verifier::kTestId1FieldNumber;
const int test_msg_verifier::kTestId2FieldNumber;
#endif  // !_MSC_VER

test_msg_verifier::test_msg_verifier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test_msg_verifier)
}

void test_msg_verifier::InitAsDefaultInstance() {
}

test_msg_verifier::test_msg_verifier(const test_msg_verifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test_msg_verifier)
}

void test_msg_verifier::SharedCtor() {
  _cached_size_ = 0;
  test_id_1_ = 0u;
  test_id_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_verifier::~test_msg_verifier() {
  // @@protoc_insertion_point(destructor:test_msg_verifier)
  SharedDtor();
}

void test_msg_verifier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void test_msg_verifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_verifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_verifier_descriptor_;
}

const test_msg_verifier& test_msg_verifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kind_2eproto();
  return *default_instance_;
}

test_msg_verifier* test_msg_verifier::default_instance_ = NULL;

test_msg_verifier* test_msg_verifier::New() const {
  return new test_msg_verifier;
}

void test_msg_verifier::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<test_msg_verifier*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(test_id_1_, test_id_2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_verifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test_msg_verifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(80016);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 test_id_1 = 10001;
      case 10001: {
        if (tag == 80008) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_id_1_)));
          set_has_test_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80016)) goto parse_test_id_2;
        break;
      }

      // optional uint32 test_id_2 = 10002;
      case 10002: {
        if (tag == 80016) {
         parse_test_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_id_2_)));
          set_has_test_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test_msg_verifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test_msg_verifier)
  return false;
#undef DO_
}

void test_msg_verifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test_msg_verifier)
  // optional uint32 test_id_1 = 10001;
  if (has_test_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10001, this->test_id_1(), output);
  }

  // optional uint32 test_id_2 = 10002;
  if (has_test_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10002, this->test_id_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test_msg_verifier)
}

::google::protobuf::uint8* test_msg_verifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_msg_verifier)
  // optional uint32 test_id_1 = 10001;
  if (has_test_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10001, this->test_id_1(), target);
  }

  // optional uint32 test_id_2 = 10002;
  if (has_test_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10002, this->test_id_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_msg_verifier)
  return target;
}

int test_msg_verifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 test_id_1 = 10001;
    if (has_test_id_1()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test_id_1());
    }

    // optional uint32 test_id_2 = 10002;
    if (has_test_id_2()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test_id_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_verifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_verifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_verifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_verifier::MergeFrom(const test_msg_verifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_id_1()) {
      set_test_id_1(from.test_id_1());
    }
    if (from.has_test_id_2()) {
      set_test_id_2(from.test_id_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_verifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_verifier::CopyFrom(const test_msg_verifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_verifier::IsInitialized() const {

  return true;
}

void test_msg_verifier::Swap(test_msg_verifier* other) {
  if (other != this) {
    std::swap(test_id_1_, other->test_id_1_);
    std::swap(test_id_2_, other->test_id_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_verifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_verifier_descriptor_;
  metadata.reflection = test_msg_verifier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arr_in_arr::kNameFieldNumber;
const int arr_in_arr::kIntArrFieldNumber;
const int arr_in_arr::kStrArrFieldNumber;
#endif  // !_MSC_VER

arr_in_arr::arr_in_arr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arr_in_arr)
}

void arr_in_arr::InitAsDefaultInstance() {
}

arr_in_arr::arr_in_arr(const arr_in_arr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:arr_in_arr)
}

void arr_in_arr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arr_in_arr::~arr_in_arr() {
  // @@protoc_insertion_point(destructor:arr_in_arr)
  SharedDtor();
}

void arr_in_arr::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void arr_in_arr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arr_in_arr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arr_in_arr_descriptor_;
}

const arr_in_arr& arr_in_arr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kind_2eproto();
  return *default_instance_;
}

arr_in_arr* arr_in_arr::default_instance_ = NULL;

arr_in_arr* arr_in_arr::New() const {
  return new arr_in_arr;
}

void arr_in_arr::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  int_arr_.Clear();
  str_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arr_in_arr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:arr_in_arr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int_arr;
        break;
      }

      // repeated int32 int_arr = 2;
      case 2: {
        if (tag == 16) {
         parse_int_arr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_int_arr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int_arr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int_arr;
        if (input->ExpectTag(26)) goto parse_str_arr;
        break;
      }

      // repeated string str_arr = 3;
      case 3: {
        if (tag == 26) {
         parse_str_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str_arr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_arr(this->str_arr_size() - 1).data(),
            this->str_arr(this->str_arr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_arr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_str_arr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:arr_in_arr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:arr_in_arr)
  return false;
#undef DO_
}

void arr_in_arr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:arr_in_arr)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int32 int_arr = 2;
  for (int i = 0; i < this->int_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->int_arr(i), output);
  }

  // repeated string str_arr = 3;
  for (int i = 0; i < this->str_arr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->str_arr(i).data(), this->str_arr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "str_arr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_arr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:arr_in_arr)
}

::google::protobuf::uint8* arr_in_arr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:arr_in_arr)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 int_arr = 2;
  for (int i = 0; i < this->int_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->int_arr(i), target);
  }

  // repeated string str_arr = 3;
  for (int i = 0; i < this->str_arr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_arr(i).data(), this->str_arr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_arr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->str_arr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arr_in_arr)
  return target;
}

int arr_in_arr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int32 int_arr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->int_arr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int_arr(i));
    }
    total_size += 1 * this->int_arr_size() + data_size;
  }

  // repeated string str_arr = 3;
  total_size += 1 * this->str_arr_size();
  for (int i = 0; i < this->str_arr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str_arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arr_in_arr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arr_in_arr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arr_in_arr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arr_in_arr::MergeFrom(const arr_in_arr& from) {
  GOOGLE_CHECK_NE(&from, this);
  int_arr_.MergeFrom(from.int_arr_);
  str_arr_.MergeFrom(from.str_arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arr_in_arr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arr_in_arr::CopyFrom(const arr_in_arr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arr_in_arr::IsInitialized() const {

  return true;
}

void arr_in_arr::Swap(arr_in_arr* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    int_arr_.Swap(&other->int_arr_);
    str_arr_.Swap(&other->str_arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arr_in_arr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arr_in_arr_descriptor_;
  metadata.reflection = arr_in_arr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arr_in_arr_cfg::kIdFieldNumber;
const int arr_in_arr_cfg::kArrFieldNumber;
#endif  // !_MSC_VER

arr_in_arr_cfg::arr_in_arr_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arr_in_arr_cfg)
}

void arr_in_arr_cfg::InitAsDefaultInstance() {
}

arr_in_arr_cfg::arr_in_arr_cfg(const arr_in_arr_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:arr_in_arr_cfg)
}

void arr_in_arr_cfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arr_in_arr_cfg::~arr_in_arr_cfg() {
  // @@protoc_insertion_point(destructor:arr_in_arr_cfg)
  SharedDtor();
}

void arr_in_arr_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arr_in_arr_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arr_in_arr_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arr_in_arr_cfg_descriptor_;
}

const arr_in_arr_cfg& arr_in_arr_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kind_2eproto();
  return *default_instance_;
}

arr_in_arr_cfg* arr_in_arr_cfg::default_instance_ = NULL;

arr_in_arr_cfg* arr_in_arr_cfg::New() const {
  return new arr_in_arr_cfg;
}

void arr_in_arr_cfg::Clear() {
  id_ = 0u;
  arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arr_in_arr_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:arr_in_arr_cfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arr;
        break;
      }

      // repeated .arr_in_arr arr = 2;
      case 2: {
        if (tag == 18) {
         parse_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:arr_in_arr_cfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:arr_in_arr_cfg)
  return false;
#undef DO_
}

void arr_in_arr_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:arr_in_arr_cfg)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .arr_in_arr arr = 2;
  for (int i = 0; i < this->arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:arr_in_arr_cfg)
}

::google::protobuf::uint8* arr_in_arr_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:arr_in_arr_cfg)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .arr_in_arr arr = 2;
  for (int i = 0; i < this->arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arr_in_arr_cfg)
  return target;
}

int arr_in_arr_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .arr_in_arr arr = 2;
  total_size += 1 * this->arr_size();
  for (int i = 0; i < this->arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arr_in_arr_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arr_in_arr_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arr_in_arr_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arr_in_arr_cfg::MergeFrom(const arr_in_arr_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  arr_.MergeFrom(from.arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arr_in_arr_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arr_in_arr_cfg::CopyFrom(const arr_in_arr_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arr_in_arr_cfg::IsInitialized() const {

  return true;
}

void arr_in_arr_cfg::Swap(arr_in_arr_cfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    arr_.Swap(&other->arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arr_in_arr_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arr_in_arr_cfg_descriptor_;
  metadata.reflection = arr_in_arr_cfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
