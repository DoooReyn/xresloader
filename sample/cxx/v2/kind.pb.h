// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#ifndef PROTOBUF_kind_2eproto__INCLUDED
#define PROTOBUF_kind_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "dependency.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_kind_2eproto();
void protobuf_AssignDesc_kind_2eproto();
void protobuf_ShutdownFile_kind_2eproto();

class role_cfg;
class role_upgrade_cfg;
class test_msg_verifier;
class arr_in_arr;
class arr_in_arr_cfg;

// ===================================================================

class role_cfg : public ::google::protobuf::Message {
 public:
  role_cfg();
  virtual ~role_cfg();

  role_cfg(const role_cfg& from);

  inline role_cfg& operator=(const role_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_cfg& default_instance();

  void Swap(role_cfg* other);

  // implements Message ----------------------------------------------

  role_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_cfg& from);
  void MergeFrom(const role_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 unlock_level = 2;
  inline bool has_unlock_level() const;
  inline void clear_unlock_level();
  static const int kUnlockLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 unlock_level() const;
  inline void set_unlock_level(::google::protobuf::uint32 value);

  // optional uint32 cost_type = 3;
  inline bool has_cost_type() const;
  inline void clear_cost_type();
  static const int kCostTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 cost_type() const;
  inline void set_cost_type(::google::protobuf::uint32 value);

  // optional int32 cost_value = 4;
  inline bool has_cost_value() const;
  inline void clear_cost_value();
  static const int kCostValueFieldNumber = 4;
  inline ::google::protobuf::int32 cost_value() const;
  inline void set_cost_value(::google::protobuf::int32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .dep_cfg dep_test = 10;
  inline bool has_dep_test() const;
  inline void clear_dep_test();
  static const int kDepTestFieldNumber = 10;
  inline const ::dep_cfg& dep_test() const;
  inline ::dep_cfg* mutable_dep_test();
  inline ::dep_cfg* release_dep_test();
  inline void set_allocated_dep_test(::dep_cfg* dep_test);

  // repeated string test_array = 11;
  inline int test_array_size() const;
  inline void clear_test_array();
  static const int kTestArrayFieldNumber = 11;
  inline const ::std::string& test_array(int index) const;
  inline ::std::string* mutable_test_array(int index);
  inline void set_test_array(int index, const ::std::string& value);
  inline void set_test_array(int index, const char* value);
  inline void set_test_array(int index, const char* value, size_t size);
  inline ::std::string* add_test_array();
  inline void add_test_array(const ::std::string& value);
  inline void add_test_array(const char* value);
  inline void add_test_array(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_array();

  // @@protoc_insertion_point(class_scope:role_cfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_unlock_level();
  inline void clear_has_unlock_level();
  inline void set_has_cost_type();
  inline void clear_has_cost_type();
  inline void set_has_cost_value();
  inline void clear_has_cost_value();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dep_test();
  inline void clear_has_dep_test();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 unlock_level_;
  ::google::protobuf::uint32 cost_type_;
  ::google::protobuf::int32 cost_value_;
  ::std::string* name_;
  ::dep_cfg* dep_test_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_array_;
  friend void  protobuf_AddDesc_kind_2eproto();
  friend void protobuf_AssignDesc_kind_2eproto();
  friend void protobuf_ShutdownFile_kind_2eproto();

  void InitAsDefaultInstance();
  static role_cfg* default_instance_;
};
// -------------------------------------------------------------------

class role_upgrade_cfg : public ::google::protobuf::Message {
 public:
  role_upgrade_cfg();
  virtual ~role_upgrade_cfg();

  role_upgrade_cfg(const role_upgrade_cfg& from);

  inline role_upgrade_cfg& operator=(const role_upgrade_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_upgrade_cfg& default_instance();

  void Swap(role_upgrade_cfg* other);

  // implements Message ----------------------------------------------

  role_upgrade_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_upgrade_cfg& from);
  void MergeFrom(const role_upgrade_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 CostType = 3;
  inline bool has_costtype() const;
  inline void clear_costtype();
  static const int kCostTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 costtype() const;
  inline void set_costtype(::google::protobuf::uint32 value);

  // optional int32 CostValue = 4;
  inline bool has_costvalue() const;
  inline void clear_costvalue();
  static const int kCostValueFieldNumber = 4;
  inline ::google::protobuf::int32 costvalue() const;
  inline void set_costvalue(::google::protobuf::int32 value);

  // optional int32 ScoreAdd = 5;
  inline bool has_scoreadd() const;
  inline void clear_scoreadd();
  static const int kScoreAddFieldNumber = 5;
  inline ::google::protobuf::int32 scoreadd() const;
  inline void set_scoreadd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:role_upgrade_cfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_costtype();
  inline void clear_has_costtype();
  inline void set_has_costvalue();
  inline void clear_has_costvalue();
  inline void set_has_scoreadd();
  inline void clear_has_scoreadd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 costtype_;
  ::google::protobuf::int32 costvalue_;
  ::google::protobuf::int32 scoreadd_;
  friend void  protobuf_AddDesc_kind_2eproto();
  friend void protobuf_AssignDesc_kind_2eproto();
  friend void protobuf_ShutdownFile_kind_2eproto();

  void InitAsDefaultInstance();
  static role_upgrade_cfg* default_instance_;
};
// -------------------------------------------------------------------

class test_msg_verifier : public ::google::protobuf::Message {
 public:
  test_msg_verifier();
  virtual ~test_msg_verifier();

  test_msg_verifier(const test_msg_verifier& from);

  inline test_msg_verifier& operator=(const test_msg_verifier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test_msg_verifier& default_instance();

  void Swap(test_msg_verifier* other);

  // implements Message ----------------------------------------------

  test_msg_verifier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test_msg_verifier& from);
  void MergeFrom(const test_msg_verifier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 test_id_1 = 10001;
  inline bool has_test_id_1() const;
  inline void clear_test_id_1();
  static const int kTestId1FieldNumber = 10001;
  inline ::google::protobuf::uint32 test_id_1() const;
  inline void set_test_id_1(::google::protobuf::uint32 value);

  // optional uint32 test_id_2 = 10002;
  inline bool has_test_id_2() const;
  inline void clear_test_id_2();
  static const int kTestId2FieldNumber = 10002;
  inline ::google::protobuf::uint32 test_id_2() const;
  inline void set_test_id_2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:test_msg_verifier)
 private:
  inline void set_has_test_id_1();
  inline void clear_has_test_id_1();
  inline void set_has_test_id_2();
  inline void clear_has_test_id_2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 test_id_1_;
  ::google::protobuf::uint32 test_id_2_;
  friend void  protobuf_AddDesc_kind_2eproto();
  friend void protobuf_AssignDesc_kind_2eproto();
  friend void protobuf_ShutdownFile_kind_2eproto();

  void InitAsDefaultInstance();
  static test_msg_verifier* default_instance_;
};
// -------------------------------------------------------------------

class arr_in_arr : public ::google::protobuf::Message {
 public:
  arr_in_arr();
  virtual ~arr_in_arr();

  arr_in_arr(const arr_in_arr& from);

  inline arr_in_arr& operator=(const arr_in_arr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const arr_in_arr& default_instance();

  void Swap(arr_in_arr* other);

  // implements Message ----------------------------------------------

  arr_in_arr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const arr_in_arr& from);
  void MergeFrom(const arr_in_arr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 int_arr = 2;
  inline int int_arr_size() const;
  inline void clear_int_arr();
  static const int kIntArrFieldNumber = 2;
  inline ::google::protobuf::int32 int_arr(int index) const;
  inline void set_int_arr(int index, ::google::protobuf::int32 value);
  inline void add_int_arr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_arr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_arr();

  // repeated string str_arr = 3;
  inline int str_arr_size() const;
  inline void clear_str_arr();
  static const int kStrArrFieldNumber = 3;
  inline const ::std::string& str_arr(int index) const;
  inline ::std::string* mutable_str_arr(int index);
  inline void set_str_arr(int index, const ::std::string& value);
  inline void set_str_arr(int index, const char* value);
  inline void set_str_arr(int index, const char* value, size_t size);
  inline ::std::string* add_str_arr();
  inline void add_str_arr(const ::std::string& value);
  inline void add_str_arr(const char* value);
  inline void add_str_arr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& str_arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_str_arr();

  // @@protoc_insertion_point(class_scope:arr_in_arr)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_arr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> str_arr_;
  friend void  protobuf_AddDesc_kind_2eproto();
  friend void protobuf_AssignDesc_kind_2eproto();
  friend void protobuf_ShutdownFile_kind_2eproto();

  void InitAsDefaultInstance();
  static arr_in_arr* default_instance_;
};
// -------------------------------------------------------------------

class arr_in_arr_cfg : public ::google::protobuf::Message {
 public:
  arr_in_arr_cfg();
  virtual ~arr_in_arr_cfg();

  arr_in_arr_cfg(const arr_in_arr_cfg& from);

  inline arr_in_arr_cfg& operator=(const arr_in_arr_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const arr_in_arr_cfg& default_instance();

  void Swap(arr_in_arr_cfg* other);

  // implements Message ----------------------------------------------

  arr_in_arr_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const arr_in_arr_cfg& from);
  void MergeFrom(const arr_in_arr_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .arr_in_arr arr = 2;
  inline int arr_size() const;
  inline void clear_arr();
  static const int kArrFieldNumber = 2;
  inline const ::arr_in_arr& arr(int index) const;
  inline ::arr_in_arr* mutable_arr(int index);
  inline ::arr_in_arr* add_arr();
  inline const ::google::protobuf::RepeatedPtrField< ::arr_in_arr >&
      arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::arr_in_arr >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:arr_in_arr_cfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::arr_in_arr > arr_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_kind_2eproto();
  friend void protobuf_AssignDesc_kind_2eproto();
  friend void protobuf_ShutdownFile_kind_2eproto();

  void InitAsDefaultInstance();
  static arr_in_arr_cfg* default_instance_;
};
// ===================================================================


// ===================================================================

// role_cfg

// optional uint32 id = 1;
inline bool role_cfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_cfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_cfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_cfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 role_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_cfg.id)
  return id_;
}
inline void role_cfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:role_cfg.id)
}

// optional uint32 unlock_level = 2;
inline bool role_cfg::has_unlock_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_cfg::set_has_unlock_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_cfg::clear_has_unlock_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_cfg::clear_unlock_level() {
  unlock_level_ = 0u;
  clear_has_unlock_level();
}
inline ::google::protobuf::uint32 role_cfg::unlock_level() const {
  // @@protoc_insertion_point(field_get:role_cfg.unlock_level)
  return unlock_level_;
}
inline void role_cfg::set_unlock_level(::google::protobuf::uint32 value) {
  set_has_unlock_level();
  unlock_level_ = value;
  // @@protoc_insertion_point(field_set:role_cfg.unlock_level)
}

// optional uint32 cost_type = 3;
inline bool role_cfg::has_cost_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_cfg::set_has_cost_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_cfg::clear_has_cost_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_cfg::clear_cost_type() {
  cost_type_ = 0u;
  clear_has_cost_type();
}
inline ::google::protobuf::uint32 role_cfg::cost_type() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_type)
  return cost_type_;
}
inline void role_cfg::set_cost_type(::google::protobuf::uint32 value) {
  set_has_cost_type();
  cost_type_ = value;
  // @@protoc_insertion_point(field_set:role_cfg.cost_type)
}

// optional int32 cost_value = 4;
inline bool role_cfg::has_cost_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_cfg::set_has_cost_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_cfg::clear_has_cost_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_cfg::clear_cost_value() {
  cost_value_ = 0;
  clear_has_cost_value();
}
inline ::google::protobuf::int32 role_cfg::cost_value() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_value)
  return cost_value_;
}
inline void role_cfg::set_cost_value(::google::protobuf::int32 value) {
  set_has_cost_value();
  cost_value_ = value;
  // @@protoc_insertion_point(field_set:role_cfg.cost_value)
}

// optional string name = 5;
inline bool role_cfg::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_cfg::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_cfg::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_cfg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& role_cfg::name() const {
  // @@protoc_insertion_point(field_get:role_cfg.name)
  return *name_;
}
inline void role_cfg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:role_cfg.name)
}
inline void role_cfg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.name)
}
inline void role_cfg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.name)
}
inline ::std::string* role_cfg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:role_cfg.name)
  return name_;
}
inline ::std::string* role_cfg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void role_cfg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:role_cfg.name)
}

// optional .dep_cfg dep_test = 10;
inline bool role_cfg::has_dep_test() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_cfg::set_has_dep_test() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_cfg::clear_has_dep_test() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_cfg::clear_dep_test() {
  if (dep_test_ != NULL) dep_test_->::dep_cfg::Clear();
  clear_has_dep_test();
}
inline const ::dep_cfg& role_cfg::dep_test() const {
  // @@protoc_insertion_point(field_get:role_cfg.dep_test)
  return dep_test_ != NULL ? *dep_test_ : *default_instance_->dep_test_;
}
inline ::dep_cfg* role_cfg::mutable_dep_test() {
  set_has_dep_test();
  if (dep_test_ == NULL) dep_test_ = new ::dep_cfg;
  // @@protoc_insertion_point(field_mutable:role_cfg.dep_test)
  return dep_test_;
}
inline ::dep_cfg* role_cfg::release_dep_test() {
  clear_has_dep_test();
  ::dep_cfg* temp = dep_test_;
  dep_test_ = NULL;
  return temp;
}
inline void role_cfg::set_allocated_dep_test(::dep_cfg* dep_test) {
  delete dep_test_;
  dep_test_ = dep_test;
  if (dep_test) {
    set_has_dep_test();
  } else {
    clear_has_dep_test();
  }
  // @@protoc_insertion_point(field_set_allocated:role_cfg.dep_test)
}

// repeated string test_array = 11;
inline int role_cfg::test_array_size() const {
  return test_array_.size();
}
inline void role_cfg::clear_test_array() {
  test_array_.Clear();
}
inline const ::std::string& role_cfg::test_array(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.test_array)
  return test_array_.Get(index);
}
inline ::std::string* role_cfg::mutable_test_array(int index) {
  // @@protoc_insertion_point(field_mutable:role_cfg.test_array)
  return test_array_.Mutable(index);
}
inline void role_cfg::set_test_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:role_cfg.test_array)
  test_array_.Mutable(index)->assign(value);
}
inline void role_cfg::set_test_array(int index, const char* value) {
  test_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, const char* value, size_t size) {
  test_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.test_array)
}
inline ::std::string* role_cfg::add_test_array() {
  return test_array_.Add();
}
inline void role_cfg::add_test_array(const ::std::string& value) {
  test_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value) {
  test_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value, size_t size) {
  test_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.test_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
role_cfg::test_array() const {
  // @@protoc_insertion_point(field_list:role_cfg.test_array)
  return test_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
role_cfg::mutable_test_array() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.test_array)
  return &test_array_;
}

// -------------------------------------------------------------------

// role_upgrade_cfg

// optional uint32 Id = 1;
inline bool role_upgrade_cfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_upgrade_cfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_upgrade_cfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_upgrade_cfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 role_upgrade_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Id)
  return id_;
}
inline void role_upgrade_cfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Id)
}

// optional uint32 Level = 2;
inline bool role_upgrade_cfg::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_upgrade_cfg::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_upgrade_cfg::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_upgrade_cfg::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 role_upgrade_cfg::level() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Level)
  return level_;
}
inline void role_upgrade_cfg::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Level)
}

// optional uint32 CostType = 3;
inline bool role_upgrade_cfg::has_costtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_upgrade_cfg::set_has_costtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_upgrade_cfg::clear_has_costtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_upgrade_cfg::clear_costtype() {
  costtype_ = 0u;
  clear_has_costtype();
}
inline ::google::protobuf::uint32 role_upgrade_cfg::costtype() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostType)
  return costtype_;
}
inline void role_upgrade_cfg::set_costtype(::google::protobuf::uint32 value) {
  set_has_costtype();
  costtype_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostType)
}

// optional int32 CostValue = 4;
inline bool role_upgrade_cfg::has_costvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_upgrade_cfg::set_has_costvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_upgrade_cfg::clear_has_costvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_upgrade_cfg::clear_costvalue() {
  costvalue_ = 0;
  clear_has_costvalue();
}
inline ::google::protobuf::int32 role_upgrade_cfg::costvalue() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostValue)
  return costvalue_;
}
inline void role_upgrade_cfg::set_costvalue(::google::protobuf::int32 value) {
  set_has_costvalue();
  costvalue_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostValue)
}

// optional int32 ScoreAdd = 5;
inline bool role_upgrade_cfg::has_scoreadd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_upgrade_cfg::set_has_scoreadd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_upgrade_cfg::clear_has_scoreadd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_upgrade_cfg::clear_scoreadd() {
  scoreadd_ = 0;
  clear_has_scoreadd();
}
inline ::google::protobuf::int32 role_upgrade_cfg::scoreadd() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.ScoreAdd)
  return scoreadd_;
}
inline void role_upgrade_cfg::set_scoreadd(::google::protobuf::int32 value) {
  set_has_scoreadd();
  scoreadd_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.ScoreAdd)
}

// -------------------------------------------------------------------

// test_msg_verifier

// optional uint32 test_id_1 = 10001;
inline bool test_msg_verifier::has_test_id_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test_msg_verifier::set_has_test_id_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test_msg_verifier::clear_has_test_id_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test_msg_verifier::clear_test_id_1() {
  test_id_1_ = 0u;
  clear_has_test_id_1();
}
inline ::google::protobuf::uint32 test_msg_verifier::test_id_1() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_1)
  return test_id_1_;
}
inline void test_msg_verifier::set_test_id_1(::google::protobuf::uint32 value) {
  set_has_test_id_1();
  test_id_1_ = value;
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_1)
}

// optional uint32 test_id_2 = 10002;
inline bool test_msg_verifier::has_test_id_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void test_msg_verifier::set_has_test_id_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void test_msg_verifier::clear_has_test_id_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void test_msg_verifier::clear_test_id_2() {
  test_id_2_ = 0u;
  clear_has_test_id_2();
}
inline ::google::protobuf::uint32 test_msg_verifier::test_id_2() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_2)
  return test_id_2_;
}
inline void test_msg_verifier::set_test_id_2(::google::protobuf::uint32 value) {
  set_has_test_id_2();
  test_id_2_ = value;
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_2)
}

// -------------------------------------------------------------------

// arr_in_arr

// optional string name = 1;
inline bool arr_in_arr::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void arr_in_arr::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void arr_in_arr::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void arr_in_arr::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& arr_in_arr::name() const {
  // @@protoc_insertion_point(field_get:arr_in_arr.name)
  return *name_;
}
inline void arr_in_arr::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:arr_in_arr.name)
}
inline void arr_in_arr::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:arr_in_arr.name)
}
inline void arr_in_arr::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:arr_in_arr.name)
}
inline ::std::string* arr_in_arr::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:arr_in_arr.name)
  return name_;
}
inline ::std::string* arr_in_arr::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void arr_in_arr::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.name)
}

// repeated int32 int_arr = 2;
inline int arr_in_arr::int_arr_size() const {
  return int_arr_.size();
}
inline void arr_in_arr::clear_int_arr() {
  int_arr_.Clear();
}
inline ::google::protobuf::int32 arr_in_arr::int_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr.int_arr)
  return int_arr_.Get(index);
}
inline void arr_in_arr::set_int_arr(int index, ::google::protobuf::int32 value) {
  int_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr.int_arr)
}
inline void arr_in_arr::add_int_arr(::google::protobuf::int32 value) {
  int_arr_.Add(value);
  // @@protoc_insertion_point(field_add:arr_in_arr.int_arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
arr_in_arr::int_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr.int_arr)
  return int_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
arr_in_arr::mutable_int_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr.int_arr)
  return &int_arr_;
}

// repeated string str_arr = 3;
inline int arr_in_arr::str_arr_size() const {
  return str_arr_.size();
}
inline void arr_in_arr::clear_str_arr() {
  str_arr_.Clear();
}
inline const ::std::string& arr_in_arr::str_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr.str_arr)
  return str_arr_.Get(index);
}
inline ::std::string* arr_in_arr::mutable_str_arr(int index) {
  // @@protoc_insertion_point(field_mutable:arr_in_arr.str_arr)
  return str_arr_.Mutable(index);
}
inline void arr_in_arr::set_str_arr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:arr_in_arr.str_arr)
  str_arr_.Mutable(index)->assign(value);
}
inline void arr_in_arr::set_str_arr(int index, const char* value) {
  str_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, const char* value, size_t size) {
  str_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:arr_in_arr.str_arr)
}
inline ::std::string* arr_in_arr::add_str_arr() {
  return str_arr_.Add();
}
inline void arr_in_arr::add_str_arr(const ::std::string& value) {
  str_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const char* value) {
  str_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const char* value, size_t size) {
  str_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:arr_in_arr.str_arr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
arr_in_arr::str_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr.str_arr)
  return str_arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
arr_in_arr::mutable_str_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr.str_arr)
  return &str_arr_;
}

// -------------------------------------------------------------------

// arr_in_arr_cfg

// optional uint32 id = 1;
inline bool arr_in_arr_cfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void arr_in_arr_cfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void arr_in_arr_cfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void arr_in_arr_cfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 arr_in_arr_cfg::id() const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.id)
  return id_;
}
inline void arr_in_arr_cfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.id)
}

// repeated .arr_in_arr arr = 2;
inline int arr_in_arr_cfg::arr_size() const {
  return arr_.size();
}
inline void arr_in_arr_cfg::clear_arr() {
  arr_.Clear();
}
inline const ::arr_in_arr& arr_in_arr_cfg::arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.arr)
  return arr_.Get(index);
}
inline ::arr_in_arr* arr_in_arr_cfg::mutable_arr(int index) {
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.arr)
  return arr_.Mutable(index);
}
inline ::arr_in_arr* arr_in_arr_cfg::add_arr() {
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.arr)
  return arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::arr_in_arr >&
arr_in_arr_cfg::arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.arr)
  return arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::arr_in_arr >*
arr_in_arr_cfg::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.arr)
  return &arr_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kind_2eproto__INCLUDED
