// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kind_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kind_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "xresloader.pb.h"
#include "xresloader_ue.pb.h"
#include "dependency.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kind_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kind_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kind_2eproto;
class arr_in_arr;
class arr_in_arrDefaultTypeInternal;
extern arr_in_arrDefaultTypeInternal _arr_in_arr_default_instance_;
class arr_in_arr_cfg;
class arr_in_arr_cfgDefaultTypeInternal;
extern arr_in_arr_cfgDefaultTypeInternal _arr_in_arr_cfg_default_instance_;
class role_cfg;
class role_cfgDefaultTypeInternal;
extern role_cfgDefaultTypeInternal _role_cfg_default_instance_;
class role_upgrade_cfg;
class role_upgrade_cfgDefaultTypeInternal;
extern role_upgrade_cfgDefaultTypeInternal _role_upgrade_cfg_default_instance_;
class test_msg_verifier;
class test_msg_verifierDefaultTypeInternal;
extern test_msg_verifierDefaultTypeInternal _test_msg_verifier_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::arr_in_arr* Arena::CreateMaybeMessage<::arr_in_arr>(Arena*);
template<> ::arr_in_arr_cfg* Arena::CreateMaybeMessage<::arr_in_arr_cfg>(Arena*);
template<> ::role_cfg* Arena::CreateMaybeMessage<::role_cfg>(Arena*);
template<> ::role_upgrade_cfg* Arena::CreateMaybeMessage<::role_upgrade_cfg>(Arena*);
template<> ::test_msg_verifier* Arena::CreateMaybeMessage<::test_msg_verifier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class role_cfg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:role_cfg) */ {
 public:
  role_cfg();
  virtual ~role_cfg();

  role_cfg(const role_cfg& from);
  role_cfg(role_cfg&& from) noexcept
    : role_cfg() {
    *this = ::std::move(from);
  }

  inline role_cfg& operator=(const role_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline role_cfg& operator=(role_cfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const role_cfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const role_cfg* internal_default_instance() {
    return reinterpret_cast<const role_cfg*>(
               &_role_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(role_cfg& a, role_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(role_cfg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline role_cfg* New() const final {
    return CreateMaybeMessage<role_cfg>(nullptr);
  }

  role_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<role_cfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const role_cfg& from);
  void MergeFrom(const role_cfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(role_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "role_cfg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kind_2eproto);
    return ::descriptor_table_kind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestArrayFieldNumber = 11,
    kNameFieldNumber = 5,
    kIntAsStringFieldNumber = 12,
    kDepTestFieldNumber = 10,
    kIdFieldNumber = 1,
    kUnlockLevelFieldNumber = 2,
    kCostTypeFieldNumber = 3,
    kCostValueFieldNumber = 4,
  };
  // repeated string test_array = 11;
  int test_array_size() const;
  private:
  int _internal_test_array_size() const;
  public:
  void clear_test_array();
  const std::string& test_array(int index) const;
  std::string* mutable_test_array(int index);
  void set_test_array(int index, const std::string& value);
  void set_test_array(int index, std::string&& value);
  void set_test_array(int index, const char* value);
  void set_test_array(int index, const char* value, size_t size);
  std::string* add_test_array();
  void add_test_array(const std::string& value);
  void add_test_array(std::string&& value);
  void add_test_array(const char* value);
  void add_test_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& test_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_test_array();
  private:
  const std::string& _internal_test_array(int index) const;
  std::string* _internal_add_test_array();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string int_as_string = 12;
  bool has_int_as_string() const;
  private:
  bool _internal_has_int_as_string() const;
  public:
  void clear_int_as_string();
  const std::string& int_as_string() const;
  void set_int_as_string(const std::string& value);
  void set_int_as_string(std::string&& value);
  void set_int_as_string(const char* value);
  void set_int_as_string(const char* value, size_t size);
  std::string* mutable_int_as_string();
  std::string* release_int_as_string();
  void set_allocated_int_as_string(std::string* int_as_string);
  private:
  const std::string& _internal_int_as_string() const;
  void _internal_set_int_as_string(const std::string& value);
  std::string* _internal_mutable_int_as_string();
  public:

  // optional .dep_cfg dep_test = 10;
  bool has_dep_test() const;
  private:
  bool _internal_has_dep_test() const;
  public:
  void clear_dep_test();
  const ::dep_cfg& dep_test() const;
  ::dep_cfg* release_dep_test();
  ::dep_cfg* mutable_dep_test();
  void set_allocated_dep_test(::dep_cfg* dep_test);
  private:
  const ::dep_cfg& _internal_dep_test() const;
  ::dep_cfg* _internal_mutable_dep_test();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 unlock_level = 2;
  bool has_unlock_level() const;
  private:
  bool _internal_has_unlock_level() const;
  public:
  void clear_unlock_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 unlock_level() const;
  void set_unlock_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unlock_level() const;
  void _internal_set_unlock_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cost_type = 3;
  bool has_cost_type() const;
  private:
  bool _internal_has_cost_type() const;
  public:
  void clear_cost_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 cost_type() const;
  void set_cost_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cost_type() const;
  void _internal_set_cost_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 cost_value = 4;
  bool has_cost_value() const;
  private:
  bool _internal_has_cost_value() const;
  public:
  void clear_cost_value();
  ::PROTOBUF_NAMESPACE_ID::int32 cost_value() const;
  void set_cost_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost_value() const;
  void _internal_set_cost_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:role_cfg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> test_array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr int_as_string_;
  ::dep_cfg* dep_test_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unlock_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cost_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_value_;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class role_upgrade_cfg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:role_upgrade_cfg) */ {
 public:
  role_upgrade_cfg();
  virtual ~role_upgrade_cfg();

  role_upgrade_cfg(const role_upgrade_cfg& from);
  role_upgrade_cfg(role_upgrade_cfg&& from) noexcept
    : role_upgrade_cfg() {
    *this = ::std::move(from);
  }

  inline role_upgrade_cfg& operator=(const role_upgrade_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline role_upgrade_cfg& operator=(role_upgrade_cfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const role_upgrade_cfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const role_upgrade_cfg* internal_default_instance() {
    return reinterpret_cast<const role_upgrade_cfg*>(
               &_role_upgrade_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(role_upgrade_cfg& a, role_upgrade_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(role_upgrade_cfg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline role_upgrade_cfg* New() const final {
    return CreateMaybeMessage<role_upgrade_cfg>(nullptr);
  }

  role_upgrade_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<role_upgrade_cfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const role_upgrade_cfg& from);
  void MergeFrom(const role_upgrade_cfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(role_upgrade_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "role_upgrade_cfg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kind_2eproto);
    return ::descriptor_table_kind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kCostTypeFieldNumber = 3,
    kCostValueFieldNumber = 4,
    kScoreAddFieldNumber = 5,
  };
  // optional uint32 Id = 1 [(.org.xresloader.ue.key_tag) = 1000];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
  bool has_costtype() const;
  private:
  bool _internal_has_costtype() const;
  public:
  void clear_costtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 costtype() const;
  void set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_costtype() const;
  void _internal_set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 CostValue = 4;
  bool has_costvalue() const;
  private:
  bool _internal_has_costvalue() const;
  public:
  void clear_costvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 costvalue() const;
  void set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_costvalue() const;
  void _internal_set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ScoreAdd = 5;
  bool has_scoreadd() const;
  private:
  bool _internal_has_scoreadd() const;
  public:
  void clear_scoreadd();
  ::PROTOBUF_NAMESPACE_ID::int32 scoreadd() const;
  void set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scoreadd() const;
  void _internal_set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:role_upgrade_cfg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 costtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 costvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 scoreadd_;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class test_msg_verifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_msg_verifier) */ {
 public:
  test_msg_verifier();
  virtual ~test_msg_verifier();

  test_msg_verifier(const test_msg_verifier& from);
  test_msg_verifier(test_msg_verifier&& from) noexcept
    : test_msg_verifier() {
    *this = ::std::move(from);
  }

  inline test_msg_verifier& operator=(const test_msg_verifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline test_msg_verifier& operator=(test_msg_verifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const test_msg_verifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const test_msg_verifier* internal_default_instance() {
    return reinterpret_cast<const test_msg_verifier*>(
               &_test_msg_verifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(test_msg_verifier& a, test_msg_verifier& b) {
    a.Swap(&b);
  }
  inline void Swap(test_msg_verifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline test_msg_verifier* New() const final {
    return CreateMaybeMessage<test_msg_verifier>(nullptr);
  }

  test_msg_verifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<test_msg_verifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const test_msg_verifier& from);
  void MergeFrom(const test_msg_verifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(test_msg_verifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_msg_verifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kind_2eproto);
    return ::descriptor_table_kind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestId1FieldNumber = 10001,
    kTestId2FieldNumber = 10002,
  };
  // optional uint32 test_id_1 = 10001;
  bool has_test_id_1() const;
  private:
  bool _internal_has_test_id_1() const;
  public:
  void clear_test_id_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 test_id_1() const;
  void set_test_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_test_id_1() const;
  void _internal_set_test_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
  bool has_test_id_2() const;
  private:
  bool _internal_has_test_id_2() const;
  public:
  void clear_test_id_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 test_id_2() const;
  void set_test_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_test_id_2() const;
  void _internal_set_test_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:test_msg_verifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 test_id_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 test_id_2_;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class arr_in_arr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arr_in_arr) */ {
 public:
  arr_in_arr();
  virtual ~arr_in_arr();

  arr_in_arr(const arr_in_arr& from);
  arr_in_arr(arr_in_arr&& from) noexcept
    : arr_in_arr() {
    *this = ::std::move(from);
  }

  inline arr_in_arr& operator=(const arr_in_arr& from) {
    CopyFrom(from);
    return *this;
  }
  inline arr_in_arr& operator=(arr_in_arr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const arr_in_arr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const arr_in_arr* internal_default_instance() {
    return reinterpret_cast<const arr_in_arr*>(
               &_arr_in_arr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(arr_in_arr& a, arr_in_arr& b) {
    a.Swap(&b);
  }
  inline void Swap(arr_in_arr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline arr_in_arr* New() const final {
    return CreateMaybeMessage<arr_in_arr>(nullptr);
  }

  arr_in_arr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<arr_in_arr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const arr_in_arr& from);
  void MergeFrom(const arr_in_arr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(arr_in_arr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arr_in_arr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kind_2eproto);
    return ::descriptor_table_kind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntArrFieldNumber = 2,
    kStrArrFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated int32 int_arr = 2 [packed = true];
  int int_arr_size() const;
  private:
  int _internal_int_arr_size() const;
  public:
  void clear_int_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int_arr() const;
  void _internal_add_int_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int_arr(int index) const;
  void set_int_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int_arr();

  // repeated string str_arr = 3;
  int str_arr_size() const;
  private:
  int _internal_str_arr_size() const;
  public:
  void clear_str_arr();
  const std::string& str_arr(int index) const;
  std::string* mutable_str_arr(int index);
  void set_str_arr(int index, const std::string& value);
  void set_str_arr(int index, std::string&& value);
  void set_str_arr(int index, const char* value);
  void set_str_arr(int index, const char* value, size_t size);
  std::string* add_str_arr();
  void add_str_arr(const std::string& value);
  void add_str_arr(std::string&& value);
  void add_str_arr(const char* value);
  void add_str_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_arr();
  private:
  const std::string& _internal_str_arr(int index) const;
  std::string* _internal_add_str_arr();
  public:

  // optional string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:arr_in_arr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int_arr_;
  mutable std::atomic<int> _int_arr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_arr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class arr_in_arr_cfg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arr_in_arr_cfg) */ {
 public:
  arr_in_arr_cfg();
  virtual ~arr_in_arr_cfg();

  arr_in_arr_cfg(const arr_in_arr_cfg& from);
  arr_in_arr_cfg(arr_in_arr_cfg&& from) noexcept
    : arr_in_arr_cfg() {
    *this = ::std::move(from);
  }

  inline arr_in_arr_cfg& operator=(const arr_in_arr_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline arr_in_arr_cfg& operator=(arr_in_arr_cfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const arr_in_arr_cfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const arr_in_arr_cfg* internal_default_instance() {
    return reinterpret_cast<const arr_in_arr_cfg*>(
               &_arr_in_arr_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(arr_in_arr_cfg& a, arr_in_arr_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(arr_in_arr_cfg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline arr_in_arr_cfg* New() const final {
    return CreateMaybeMessage<arr_in_arr_cfg>(nullptr);
  }

  arr_in_arr_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<arr_in_arr_cfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const arr_in_arr_cfg& from);
  void MergeFrom(const arr_in_arr_cfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(arr_in_arr_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arr_in_arr_cfg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kind_2eproto);
    return ::descriptor_table_kind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 2,
    kTestPlainIntArrFieldNumber = 3,
    kTestPlainEnumArrFieldNumber = 4,
    kTestPlainMsgArrFieldNumber = 6,
    kTestPlainMsgFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated .arr_in_arr arr = 2;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  ::arr_in_arr* mutable_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr >*
      mutable_arr();
  private:
  const ::arr_in_arr& _internal_arr(int index) const;
  ::arr_in_arr* _internal_add_arr();
  public:
  const ::arr_in_arr& arr(int index) const;
  ::arr_in_arr* add_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr >&
      arr() const;

  // repeated int32 test_plain_int_arr = 3;
  int test_plain_int_arr_size() const;
  private:
  int _internal_test_plain_int_arr_size() const;
  public:
  void clear_test_plain_int_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_plain_int_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_test_plain_int_arr() const;
  void _internal_add_test_plain_int_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_test_plain_int_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 test_plain_int_arr(int index) const;
  void set_test_plain_int_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_test_plain_int_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      test_plain_int_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_test_plain_int_arr();

  // repeated .cost_type test_plain_enum_arr = 4;
  int test_plain_enum_arr_size() const;
  private:
  int _internal_test_plain_enum_arr_size() const;
  public:
  void clear_test_plain_enum_arr();
  private:
  ::cost_type _internal_test_plain_enum_arr(int index) const;
  void _internal_add_test_plain_enum_arr(::cost_type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_test_plain_enum_arr();
  public:
  ::cost_type test_plain_enum_arr(int index) const;
  void set_test_plain_enum_arr(int index, ::cost_type value);
  void add_test_plain_enum_arr(::cost_type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& test_plain_enum_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_test_plain_enum_arr();

  // repeated .test_msg_verifier test_plain_msg_arr = 6;
  int test_plain_msg_arr_size() const;
  private:
  int _internal_test_plain_msg_arr_size() const;
  public:
  void clear_test_plain_msg_arr();
  ::test_msg_verifier* mutable_test_plain_msg_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier >*
      mutable_test_plain_msg_arr();
  private:
  const ::test_msg_verifier& _internal_test_plain_msg_arr(int index) const;
  ::test_msg_verifier* _internal_add_test_plain_msg_arr();
  public:
  const ::test_msg_verifier& test_plain_msg_arr(int index) const;
  ::test_msg_verifier* add_test_plain_msg_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier >&
      test_plain_msg_arr() const;

  // optional .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
  bool has_test_plain_msg() const;
  private:
  bool _internal_has_test_plain_msg() const;
  public:
  void clear_test_plain_msg();
  const ::test_msg_verifier& test_plain_msg() const;
  ::test_msg_verifier* release_test_plain_msg();
  ::test_msg_verifier* mutable_test_plain_msg();
  void set_allocated_test_plain_msg(::test_msg_verifier* test_plain_msg);
  private:
  const ::test_msg_verifier& _internal_test_plain_msg() const;
  ::test_msg_verifier* _internal_mutable_test_plain_msg();
  public:

  // optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:arr_in_arr_cfg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr > arr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > test_plain_int_arr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> test_plain_enum_arr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier > test_plain_msg_arr_;
  ::test_msg_verifier* test_plain_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_kind_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// role_cfg

// optional uint32 id = 1;
inline bool role_cfg::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool role_cfg::has_id() const {
  return _internal_has_id();
}
inline void role_cfg::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_cfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_cfg.id)
  return _internal_id();
}
inline void role_cfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void role_cfg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:role_cfg.id)
}

// optional uint32 unlock_level = 2;
inline bool role_cfg::_internal_has_unlock_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool role_cfg::has_unlock_level() const {
  return _internal_has_unlock_level();
}
inline void role_cfg::clear_unlock_level() {
  unlock_level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_cfg::_internal_unlock_level() const {
  return unlock_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_cfg::unlock_level() const {
  // @@protoc_insertion_point(field_get:role_cfg.unlock_level)
  return _internal_unlock_level();
}
inline void role_cfg::_internal_set_unlock_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  unlock_level_ = value;
}
inline void role_cfg::set_unlock_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unlock_level(value);
  // @@protoc_insertion_point(field_set:role_cfg.unlock_level)
}

// optional uint32 cost_type = 3;
inline bool role_cfg::_internal_has_cost_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool role_cfg::has_cost_type() const {
  return _internal_has_cost_type();
}
inline void role_cfg::clear_cost_type() {
  cost_type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_cfg::_internal_cost_type() const {
  return cost_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_cfg::cost_type() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_type)
  return _internal_cost_type();
}
inline void role_cfg::_internal_set_cost_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  cost_type_ = value;
}
inline void role_cfg::set_cost_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cost_type(value);
  // @@protoc_insertion_point(field_set:role_cfg.cost_type)
}

// optional int32 cost_value = 4;
inline bool role_cfg::_internal_has_cost_value() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool role_cfg::has_cost_value() const {
  return _internal_has_cost_value();
}
inline void role_cfg::clear_cost_value() {
  cost_value_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_cfg::_internal_cost_value() const {
  return cost_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_cfg::cost_value() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_value)
  return _internal_cost_value();
}
inline void role_cfg::_internal_set_cost_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  cost_value_ = value;
}
inline void role_cfg::set_cost_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost_value(value);
  // @@protoc_insertion_point(field_set:role_cfg.cost_value)
}

// optional string name = 5;
inline bool role_cfg::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool role_cfg::has_name() const {
  return _internal_has_name();
}
inline void role_cfg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& role_cfg::name() const {
  // @@protoc_insertion_point(field_get:role_cfg.name)
  return _internal_name();
}
inline void role_cfg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:role_cfg.name)
}
inline std::string* role_cfg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:role_cfg.name)
  return _internal_mutable_name();
}
inline const std::string& role_cfg::_internal_name() const {
  return name_.GetNoArena();
}
inline void role_cfg::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void role_cfg::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:role_cfg.name)
}
inline void role_cfg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:role_cfg.name)
}
inline void role_cfg::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:role_cfg.name)
}
inline std::string* role_cfg::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* role_cfg::release_name() {
  // @@protoc_insertion_point(field_release:role_cfg.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void role_cfg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:role_cfg.name)
}

// optional .dep_cfg dep_test = 10;
inline bool role_cfg::_internal_has_dep_test() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dep_test_ != nullptr);
  return value;
}
inline bool role_cfg::has_dep_test() const {
  return _internal_has_dep_test();
}
inline const ::dep_cfg& role_cfg::_internal_dep_test() const {
  const ::dep_cfg* p = dep_test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dep_cfg*>(
      &::_dep_cfg_default_instance_);
}
inline const ::dep_cfg& role_cfg::dep_test() const {
  // @@protoc_insertion_point(field_get:role_cfg.dep_test)
  return _internal_dep_test();
}
inline ::dep_cfg* role_cfg::release_dep_test() {
  // @@protoc_insertion_point(field_release:role_cfg.dep_test)
  _has_bits_[0] &= ~0x00000004u;
  ::dep_cfg* temp = dep_test_;
  dep_test_ = nullptr;
  return temp;
}
inline ::dep_cfg* role_cfg::_internal_mutable_dep_test() {
  _has_bits_[0] |= 0x00000004u;
  if (dep_test_ == nullptr) {
    auto* p = CreateMaybeMessage<::dep_cfg>(GetArenaNoVirtual());
    dep_test_ = p;
  }
  return dep_test_;
}
inline ::dep_cfg* role_cfg::mutable_dep_test() {
  // @@protoc_insertion_point(field_mutable:role_cfg.dep_test)
  return _internal_mutable_dep_test();
}
inline void role_cfg::set_allocated_dep_test(::dep_cfg* dep_test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dep_test_);
  }
  if (dep_test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dep_test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dep_test, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dep_test_ = dep_test;
  // @@protoc_insertion_point(field_set_allocated:role_cfg.dep_test)
}

// repeated string test_array = 11;
inline int role_cfg::_internal_test_array_size() const {
  return test_array_.size();
}
inline int role_cfg::test_array_size() const {
  return _internal_test_array_size();
}
inline void role_cfg::clear_test_array() {
  test_array_.Clear();
}
inline std::string* role_cfg::add_test_array() {
  // @@protoc_insertion_point(field_add_mutable:role_cfg.test_array)
  return _internal_add_test_array();
}
inline const std::string& role_cfg::_internal_test_array(int index) const {
  return test_array_.Get(index);
}
inline const std::string& role_cfg::test_array(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.test_array)
  return _internal_test_array(index);
}
inline std::string* role_cfg::mutable_test_array(int index) {
  // @@protoc_insertion_point(field_mutable:role_cfg.test_array)
  return test_array_.Mutable(index);
}
inline void role_cfg::set_test_array(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:role_cfg.test_array)
  test_array_.Mutable(index)->assign(value);
}
inline void role_cfg::set_test_array(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:role_cfg.test_array)
  test_array_.Mutable(index)->assign(std::move(value));
}
inline void role_cfg::set_test_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  test_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, const char* value, size_t size) {
  test_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.test_array)
}
inline std::string* role_cfg::_internal_add_test_array() {
  return test_array_.Add();
}
inline void role_cfg::add_test_array(const std::string& value) {
  test_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.test_array)
}
inline void role_cfg::add_test_array(std::string&& value) {
  test_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  test_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value, size_t size) {
  test_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.test_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
role_cfg::test_array() const {
  // @@protoc_insertion_point(field_list:role_cfg.test_array)
  return test_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
role_cfg::mutable_test_array() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.test_array)
  return &test_array_;
}

// optional string int_as_string = 12;
inline bool role_cfg::_internal_has_int_as_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool role_cfg::has_int_as_string() const {
  return _internal_has_int_as_string();
}
inline void role_cfg::clear_int_as_string() {
  int_as_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& role_cfg::int_as_string() const {
  // @@protoc_insertion_point(field_get:role_cfg.int_as_string)
  return _internal_int_as_string();
}
inline void role_cfg::set_int_as_string(const std::string& value) {
  _internal_set_int_as_string(value);
  // @@protoc_insertion_point(field_set:role_cfg.int_as_string)
}
inline std::string* role_cfg::mutable_int_as_string() {
  // @@protoc_insertion_point(field_mutable:role_cfg.int_as_string)
  return _internal_mutable_int_as_string();
}
inline const std::string& role_cfg::_internal_int_as_string() const {
  return int_as_string_.GetNoArena();
}
inline void role_cfg::_internal_set_int_as_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  int_as_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void role_cfg::set_int_as_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  int_as_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:role_cfg.int_as_string)
}
inline void role_cfg::set_int_as_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  int_as_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:role_cfg.int_as_string)
}
inline void role_cfg::set_int_as_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  int_as_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:role_cfg.int_as_string)
}
inline std::string* role_cfg::_internal_mutable_int_as_string() {
  _has_bits_[0] |= 0x00000002u;
  return int_as_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* role_cfg::release_int_as_string() {
  // @@protoc_insertion_point(field_release:role_cfg.int_as_string)
  if (!has_int_as_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return int_as_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void role_cfg::set_allocated_int_as_string(std::string* int_as_string) {
  if (int_as_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  int_as_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), int_as_string);
  // @@protoc_insertion_point(field_set_allocated:role_cfg.int_as_string)
}

// -------------------------------------------------------------------

// role_upgrade_cfg

// optional uint32 Id = 1 [(.org.xresloader.ue.key_tag) = 1000];
inline bool role_upgrade_cfg::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_id() const {
  return _internal_has_id();
}
inline void role_upgrade_cfg::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Id)
  return _internal_id();
}
inline void role_upgrade_cfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void role_upgrade_cfg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Id)
}

// optional uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
inline bool role_upgrade_cfg::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_level() const {
  return _internal_has_level();
}
inline void role_upgrade_cfg::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::level() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Level)
  return _internal_level();
}
inline void role_upgrade_cfg::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
}
inline void role_upgrade_cfg::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Level)
}

// optional uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
inline bool role_upgrade_cfg::_internal_has_costtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_costtype() const {
  return _internal_has_costtype();
}
inline void role_upgrade_cfg::clear_costtype() {
  costtype_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_costtype() const {
  return costtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::costtype() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostType)
  return _internal_costtype();
}
inline void role_upgrade_cfg::_internal_set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  costtype_ = value;
}
inline void role_upgrade_cfg::set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_costtype(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostType)
}

// optional int32 CostValue = 4;
inline bool role_upgrade_cfg::_internal_has_costvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_costvalue() const {
  return _internal_has_costvalue();
}
inline void role_upgrade_cfg::clear_costvalue() {
  costvalue_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::_internal_costvalue() const {
  return costvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::costvalue() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostValue)
  return _internal_costvalue();
}
inline void role_upgrade_cfg::_internal_set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  costvalue_ = value;
}
inline void role_upgrade_cfg::set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_costvalue(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostValue)
}

// optional int32 ScoreAdd = 5;
inline bool role_upgrade_cfg::_internal_has_scoreadd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_scoreadd() const {
  return _internal_has_scoreadd();
}
inline void role_upgrade_cfg::clear_scoreadd() {
  scoreadd_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::_internal_scoreadd() const {
  return scoreadd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::scoreadd() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.ScoreAdd)
  return _internal_scoreadd();
}
inline void role_upgrade_cfg::_internal_set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  scoreadd_ = value;
}
inline void role_upgrade_cfg::set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scoreadd(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.ScoreAdd)
}

// -------------------------------------------------------------------

// test_msg_verifier

// optional uint32 test_id_1 = 10001;
inline bool test_msg_verifier::_internal_has_test_id_1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool test_msg_verifier::has_test_id_1() const {
  return _internal_has_test_id_1();
}
inline void test_msg_verifier::clear_test_id_1() {
  test_id_1_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 test_msg_verifier::_internal_test_id_1() const {
  return test_id_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 test_msg_verifier::test_id_1() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_1)
  return _internal_test_id_1();
}
inline void test_msg_verifier::_internal_set_test_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  test_id_1_ = value;
}
inline void test_msg_verifier::set_test_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_test_id_1(value);
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_1)
}

// optional uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
inline bool test_msg_verifier::_internal_has_test_id_2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool test_msg_verifier::has_test_id_2() const {
  return _internal_has_test_id_2();
}
inline void test_msg_verifier::clear_test_id_2() {
  test_id_2_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 test_msg_verifier::_internal_test_id_2() const {
  return test_id_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 test_msg_verifier::test_id_2() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_2)
  return _internal_test_id_2();
}
inline void test_msg_verifier::_internal_set_test_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  test_id_2_ = value;
}
inline void test_msg_verifier::set_test_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_test_id_2(value);
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_2)
}

// -------------------------------------------------------------------

// arr_in_arr

// optional string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
inline bool arr_in_arr::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool arr_in_arr::has_name() const {
  return _internal_has_name();
}
inline void arr_in_arr::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& arr_in_arr::name() const {
  // @@protoc_insertion_point(field_get:arr_in_arr.name)
  return _internal_name();
}
inline void arr_in_arr::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:arr_in_arr.name)
}
inline std::string* arr_in_arr::mutable_name() {
  // @@protoc_insertion_point(field_mutable:arr_in_arr.name)
  return _internal_mutable_name();
}
inline const std::string& arr_in_arr::_internal_name() const {
  return name_.GetNoArena();
}
inline void arr_in_arr::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void arr_in_arr::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arr_in_arr.name)
}
inline void arr_in_arr::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arr_in_arr.name)
}
inline void arr_in_arr::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arr_in_arr.name)
}
inline std::string* arr_in_arr::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* arr_in_arr::release_name() {
  // @@protoc_insertion_point(field_release:arr_in_arr.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void arr_in_arr::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.name)
}

// repeated int32 int_arr = 2 [packed = true];
inline int arr_in_arr::_internal_int_arr_size() const {
  return int_arr_.size();
}
inline int arr_in_arr::int_arr_size() const {
  return _internal_int_arr_size();
}
inline void arr_in_arr::clear_int_arr() {
  int_arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 arr_in_arr::_internal_int_arr(int index) const {
  return int_arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 arr_in_arr::int_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr.int_arr)
  return _internal_int_arr(index);
}
inline void arr_in_arr::set_int_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr.int_arr)
}
inline void arr_in_arr::_internal_add_int_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_arr_.Add(value);
}
inline void arr_in_arr::add_int_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int_arr(value);
  // @@protoc_insertion_point(field_add:arr_in_arr.int_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
arr_in_arr::_internal_int_arr() const {
  return int_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
arr_in_arr::int_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr.int_arr)
  return _internal_int_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
arr_in_arr::_internal_mutable_int_arr() {
  return &int_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
arr_in_arr::mutable_int_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr.int_arr)
  return _internal_mutable_int_arr();
}

// repeated string str_arr = 3;
inline int arr_in_arr::_internal_str_arr_size() const {
  return str_arr_.size();
}
inline int arr_in_arr::str_arr_size() const {
  return _internal_str_arr_size();
}
inline void arr_in_arr::clear_str_arr() {
  str_arr_.Clear();
}
inline std::string* arr_in_arr::add_str_arr() {
  // @@protoc_insertion_point(field_add_mutable:arr_in_arr.str_arr)
  return _internal_add_str_arr();
}
inline const std::string& arr_in_arr::_internal_str_arr(int index) const {
  return str_arr_.Get(index);
}
inline const std::string& arr_in_arr::str_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr.str_arr)
  return _internal_str_arr(index);
}
inline std::string* arr_in_arr::mutable_str_arr(int index) {
  // @@protoc_insertion_point(field_mutable:arr_in_arr.str_arr)
  return str_arr_.Mutable(index);
}
inline void arr_in_arr::set_str_arr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:arr_in_arr.str_arr)
  str_arr_.Mutable(index)->assign(value);
}
inline void arr_in_arr::set_str_arr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:arr_in_arr.str_arr)
  str_arr_.Mutable(index)->assign(std::move(value));
}
inline void arr_in_arr::set_str_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, const char* value, size_t size) {
  str_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:arr_in_arr.str_arr)
}
inline std::string* arr_in_arr::_internal_add_str_arr() {
  return str_arr_.Add();
}
inline void arr_in_arr::add_str_arr(const std::string& value) {
  str_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(std::string&& value) {
  str_arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const char* value, size_t size) {
  str_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:arr_in_arr.str_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
arr_in_arr::str_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr.str_arr)
  return str_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
arr_in_arr::mutable_str_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr.str_arr)
  return &str_arr_;
}

// -------------------------------------------------------------------

// arr_in_arr_cfg

// optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
inline bool arr_in_arr_cfg::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool arr_in_arr_cfg::has_id() const {
  return _internal_has_id();
}
inline void arr_in_arr_cfg::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 arr_in_arr_cfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 arr_in_arr_cfg::id() const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.id)
  return _internal_id();
}
inline void arr_in_arr_cfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void arr_in_arr_cfg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.id)
}

// repeated .arr_in_arr arr = 2;
inline int arr_in_arr_cfg::_internal_arr_size() const {
  return arr_.size();
}
inline int arr_in_arr_cfg::arr_size() const {
  return _internal_arr_size();
}
inline void arr_in_arr_cfg::clear_arr() {
  arr_.Clear();
}
inline ::arr_in_arr* arr_in_arr_cfg::mutable_arr(int index) {
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.arr)
  return arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr >*
arr_in_arr_cfg::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.arr)
  return &arr_;
}
inline const ::arr_in_arr& arr_in_arr_cfg::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline const ::arr_in_arr& arr_in_arr_cfg::arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.arr)
  return _internal_arr(index);
}
inline ::arr_in_arr* arr_in_arr_cfg::_internal_add_arr() {
  return arr_.Add();
}
inline ::arr_in_arr* arr_in_arr_cfg::add_arr() {
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.arr)
  return _internal_add_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr >&
arr_in_arr_cfg::arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.arr)
  return arr_;
}

// repeated int32 test_plain_int_arr = 3;
inline int arr_in_arr_cfg::_internal_test_plain_int_arr_size() const {
  return test_plain_int_arr_.size();
}
inline int arr_in_arr_cfg::test_plain_int_arr_size() const {
  return _internal_test_plain_int_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_int_arr() {
  test_plain_int_arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 arr_in_arr_cfg::_internal_test_plain_int_arr(int index) const {
  return test_plain_int_arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 arr_in_arr_cfg::test_plain_int_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_int_arr)
  return _internal_test_plain_int_arr(index);
}
inline void arr_in_arr_cfg::set_test_plain_int_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  test_plain_int_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.test_plain_int_arr)
}
inline void arr_in_arr_cfg::_internal_add_test_plain_int_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  test_plain_int_arr_.Add(value);
}
inline void arr_in_arr_cfg::add_test_plain_int_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_test_plain_int_arr(value);
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_int_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
arr_in_arr_cfg::_internal_test_plain_int_arr() const {
  return test_plain_int_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
arr_in_arr_cfg::test_plain_int_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_int_arr)
  return _internal_test_plain_int_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
arr_in_arr_cfg::_internal_mutable_test_plain_int_arr() {
  return &test_plain_int_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
arr_in_arr_cfg::mutable_test_plain_int_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_int_arr)
  return _internal_mutable_test_plain_int_arr();
}

// repeated .cost_type test_plain_enum_arr = 4;
inline int arr_in_arr_cfg::_internal_test_plain_enum_arr_size() const {
  return test_plain_enum_arr_.size();
}
inline int arr_in_arr_cfg::test_plain_enum_arr_size() const {
  return _internal_test_plain_enum_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_enum_arr() {
  test_plain_enum_arr_.Clear();
}
inline ::cost_type arr_in_arr_cfg::_internal_test_plain_enum_arr(int index) const {
  return static_cast< ::cost_type >(test_plain_enum_arr_.Get(index));
}
inline ::cost_type arr_in_arr_cfg::test_plain_enum_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_enum_arr)
  return _internal_test_plain_enum_arr(index);
}
inline void arr_in_arr_cfg::set_test_plain_enum_arr(int index, ::cost_type value) {
  assert(::cost_type_IsValid(value));
  test_plain_enum_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.test_plain_enum_arr)
}
inline void arr_in_arr_cfg::_internal_add_test_plain_enum_arr(::cost_type value) {
  assert(::cost_type_IsValid(value));
  test_plain_enum_arr_.Add(value);
}
inline void arr_in_arr_cfg::add_test_plain_enum_arr(::cost_type value) {
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_enum_arr)
  _internal_add_test_plain_enum_arr(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
arr_in_arr_cfg::test_plain_enum_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_enum_arr)
  return test_plain_enum_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
arr_in_arr_cfg::_internal_mutable_test_plain_enum_arr() {
  return &test_plain_enum_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
arr_in_arr_cfg::mutable_test_plain_enum_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_enum_arr)
  return _internal_mutable_test_plain_enum_arr();
}

// optional .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
inline bool arr_in_arr_cfg::_internal_has_test_plain_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || test_plain_msg_ != nullptr);
  return value;
}
inline bool arr_in_arr_cfg::has_test_plain_msg() const {
  return _internal_has_test_plain_msg();
}
inline void arr_in_arr_cfg::clear_test_plain_msg() {
  if (test_plain_msg_ != nullptr) test_plain_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::test_msg_verifier& arr_in_arr_cfg::_internal_test_plain_msg() const {
  const ::test_msg_verifier* p = test_plain_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::test_msg_verifier*>(
      &::_test_msg_verifier_default_instance_);
}
inline const ::test_msg_verifier& arr_in_arr_cfg::test_plain_msg() const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_msg)
  return _internal_test_plain_msg();
}
inline ::test_msg_verifier* arr_in_arr_cfg::release_test_plain_msg() {
  // @@protoc_insertion_point(field_release:arr_in_arr_cfg.test_plain_msg)
  _has_bits_[0] &= ~0x00000001u;
  ::test_msg_verifier* temp = test_plain_msg_;
  test_plain_msg_ = nullptr;
  return temp;
}
inline ::test_msg_verifier* arr_in_arr_cfg::_internal_mutable_test_plain_msg() {
  _has_bits_[0] |= 0x00000001u;
  if (test_plain_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_msg_verifier>(GetArenaNoVirtual());
    test_plain_msg_ = p;
  }
  return test_plain_msg_;
}
inline ::test_msg_verifier* arr_in_arr_cfg::mutable_test_plain_msg() {
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.test_plain_msg)
  return _internal_mutable_test_plain_msg();
}
inline void arr_in_arr_cfg::set_allocated_test_plain_msg(::test_msg_verifier* test_plain_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete test_plain_msg_;
  }
  if (test_plain_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_plain_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_plain_msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  test_plain_msg_ = test_plain_msg;
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr_cfg.test_plain_msg)
}

// repeated .test_msg_verifier test_plain_msg_arr = 6;
inline int arr_in_arr_cfg::_internal_test_plain_msg_arr_size() const {
  return test_plain_msg_arr_.size();
}
inline int arr_in_arr_cfg::test_plain_msg_arr_size() const {
  return _internal_test_plain_msg_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_msg_arr() {
  test_plain_msg_arr_.Clear();
}
inline ::test_msg_verifier* arr_in_arr_cfg::mutable_test_plain_msg_arr(int index) {
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.test_plain_msg_arr)
  return test_plain_msg_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier >*
arr_in_arr_cfg::mutable_test_plain_msg_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_msg_arr)
  return &test_plain_msg_arr_;
}
inline const ::test_msg_verifier& arr_in_arr_cfg::_internal_test_plain_msg_arr(int index) const {
  return test_plain_msg_arr_.Get(index);
}
inline const ::test_msg_verifier& arr_in_arr_cfg::test_plain_msg_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_msg_arr)
  return _internal_test_plain_msg_arr(index);
}
inline ::test_msg_verifier* arr_in_arr_cfg::_internal_add_test_plain_msg_arr() {
  return test_plain_msg_arr_.Add();
}
inline ::test_msg_verifier* arr_in_arr_cfg::add_test_plain_msg_arr() {
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_msg_arr)
  return _internal_add_test_plain_msg_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier >&
arr_in_arr_cfg::test_plain_msg_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_msg_arr)
  return test_plain_msg_arr_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kind_2eproto
