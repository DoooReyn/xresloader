// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dependency.proto

#ifndef PROTOBUF_dependency_2eproto__INCLUDED
#define PROTOBUF_dependency_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dep_level2.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dependency_2eproto();
void protobuf_AssignDesc_dependency_2eproto();
void protobuf_ShutdownFile_dependency_2eproto();

class dep_cfg;

enum game_const_config {
  EN_GCC_UNKNOWN = 0,
  EN_GCC_PERCENT_BASE = 10000,
  EN_GCC_RANDOM_RANGE_UNIT = 10,
  EN_GCC_RESOURCE_MAX_LIMIT = 9999999,
  EN_GCC_LEVEL_LIMIT = 999,
  EN_GCC_SOLDIER_TYPE_MASK = 100,
  EN_GCC_ACTIVITY_TYPE_MASK = 1000,
  EN_GCC_FORMULAR_TYPE_MASK = 10,
  EN_GCC_SCREEN_WIDTH = 1136,
  EN_GCC_SCREEN_HEIGHT = 640,
  EN_GCC_CAMERA_OFFSET = 268,
  game_const_config_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  game_const_config_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool game_const_config_IsValid(int value);
const game_const_config game_const_config_MIN = EN_GCC_UNKNOWN;
const game_const_config game_const_config_MAX = EN_GCC_RESOURCE_MAX_LIMIT;
const int game_const_config_ARRAYSIZE = game_const_config_MAX + 1;

const ::google::protobuf::EnumDescriptor* game_const_config_descriptor();
inline const ::std::string& game_const_config_Name(game_const_config value) {
  return ::google::protobuf::internal::NameOfEnum(
    game_const_config_descriptor(), value);
}
inline bool game_const_config_Parse(
    const ::std::string& name, game_const_config* value) {
  return ::google::protobuf::internal::ParseNamedEnum<game_const_config>(
    game_const_config_descriptor(), name, value);
}
enum cost_type {
  EN_CT_UNKNOWN = 0,
  EN_CT_MONEY = 10001,
  EN_CT_DIAMOND = 10101,
  cost_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  cost_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool cost_type_IsValid(int value);
const cost_type cost_type_MIN = EN_CT_UNKNOWN;
const cost_type cost_type_MAX = EN_CT_DIAMOND;
const int cost_type_ARRAYSIZE = cost_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* cost_type_descriptor();
inline const ::std::string& cost_type_Name(cost_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    cost_type_descriptor(), value);
}
inline bool cost_type_Parse(
    const ::std::string& name, cost_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<cost_type>(
    cost_type_descriptor(), name, value);
}
// ===================================================================

class dep_cfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dep_cfg) */ {
 public:
  dep_cfg();
  virtual ~dep_cfg();

  dep_cfg(const dep_cfg& from);

  inline dep_cfg& operator=(const dep_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dep_cfg& default_instance();

  void Swap(dep_cfg* other);

  // implements Message ----------------------------------------------

  inline dep_cfg* New() const { return New(NULL); }

  dep_cfg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dep_cfg& from);
  void MergeFrom(const dep_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(dep_cfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .dep2_cfg dep2 = 3;
  bool has_dep2() const;
  void clear_dep2();
  static const int kDep2FieldNumber = 3;
  const ::dep2_cfg& dep2() const;
  ::dep2_cfg* mutable_dep2();
  ::dep2_cfg* release_dep2();
  void set_allocated_dep2(::dep2_cfg* dep2);

  // @@protoc_insertion_point(class_scope:dep_cfg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::dep2_cfg* dep2_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dependency_2eproto();
  friend void protobuf_AssignDesc_dependency_2eproto();
  friend void protobuf_ShutdownFile_dependency_2eproto();

  void InitAsDefaultInstance();
  static dep_cfg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// dep_cfg

// optional uint32 id = 1;
inline void dep_cfg::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 dep_cfg::id() const {
  // @@protoc_insertion_point(field_get:dep_cfg.id)
  return id_;
}
inline void dep_cfg::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dep_cfg.id)
}

// optional string name = 2;
inline void dep_cfg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& dep_cfg::name() const {
  // @@protoc_insertion_point(field_get:dep_cfg.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dep_cfg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dep_cfg.name)
}
inline void dep_cfg::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dep_cfg.name)
}
inline void dep_cfg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dep_cfg.name)
}
inline ::std::string* dep_cfg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dep_cfg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dep_cfg::release_name() {
  // @@protoc_insertion_point(field_release:dep_cfg.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dep_cfg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dep_cfg.name)
}

// optional .dep2_cfg dep2 = 3;
inline bool dep_cfg::has_dep2() const {
  return !_is_default_instance_ && dep2_ != NULL;
}
inline void dep_cfg::clear_dep2() {
  if (GetArenaNoVirtual() == NULL && dep2_ != NULL) delete dep2_;
  dep2_ = NULL;
}
inline const ::dep2_cfg& dep_cfg::dep2() const {
  // @@protoc_insertion_point(field_get:dep_cfg.dep2)
  return dep2_ != NULL ? *dep2_ : *default_instance_->dep2_;
}
inline ::dep2_cfg* dep_cfg::mutable_dep2() {
  
  if (dep2_ == NULL) {
    dep2_ = new ::dep2_cfg;
  }
  // @@protoc_insertion_point(field_mutable:dep_cfg.dep2)
  return dep2_;
}
inline ::dep2_cfg* dep_cfg::release_dep2() {
  // @@protoc_insertion_point(field_release:dep_cfg.dep2)
  
  ::dep2_cfg* temp = dep2_;
  dep2_ = NULL;
  return temp;
}
inline void dep_cfg::set_allocated_dep2(::dep2_cfg* dep2) {
  delete dep2_;
  dep2_ = dep2;
  if (dep2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dep_cfg.dep2)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::game_const_config> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_const_config>() {
  return ::game_const_config_descriptor();
}
template <> struct is_proto_enum< ::cost_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cost_type>() {
  return ::cost_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dependency_2eproto__INCLUDED
